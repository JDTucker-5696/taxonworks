<%= render "/hub/navigation_lists/hub_category_filter" %>
<div id="data_cards">
  <% Hub::Data::SECTIONS.each do |s| -%>
    <div data-section="<%= s -%>" class="data_section">
	    <div class="cards-section">
	      <% Hub::Data.items_for(s).each do |i| %>  
		      <div class="card-container">
		        <%= data_card(i) -%> 
		      </div>		      
	      <% end %>
	    </div>
	    <div class="data_section_label subtle">
	    	<div class="data-controls">
	    		<a class="cards-up" href="#"><img src="/assets/icons/arrow-up.svg" width="15"/></a>
	    		<a class="cards-down" href="#"><img src="/assets/icons/arrow-down.svg" width="15"/></a>
	    	</div>
	    	<%= s -%> 
	    </div>
    </div>
  <% end %>
</div>

<script type="text/javascript">

var carrouselData = function (sec, rows, columns) {

	// sec = Name of data section, this is for identify div.
	// rows = This is for the number of rows that will be displayed, if this number is less than the number of items, it will activate the navigation controls
	// columns = This is for the number of rows to be displayed
	
		this.childs = 0,
		this.start = 1,
		this.maxRow = 0,
		this.maxColumn = 1,
		this.nro = 1,
		this.sectionTag = "",
		this.filters = {};
		this.maxRow = rows;
		this.sectionTag = sec;
		this.resetChildsCount();
		if(this.maxRow >= this.childs) {
			this.navigation(false);
		}

		if(columns >= 1) {
			$('.data_section[data-section="' + this.sectionTag + '"]').width((250*columns) + 'px');

		}
	}

	carrouselData.prototype.addFilter = function (nameFilter) {
		this.filters[nameFilter] = true;
	}	

	carrouselData.prototype.checkChildFilter = function(childTag) {
		var find = 0;
		for (var key in this.filters) {
			if ($(childTag).attr(key)) {
				find++;
				if(this.filters[key] == true) {
		   			return true;	
				}
		    }	
		}
		if (find > 0) {
			return false;
		}
		else {
			return true;
		}
	}

	carrouselData.prototype.resetChildsCount = function() {
	  	this.childs = $('.data_section[data-section="' + this.sectionTag + '"] > .cards-section > .card-container ').length;
	}


	carrouselData.prototype.changeFilter = function(filterTag)	{
		this.filters[filterTag] = !this.filters[filterTag];
		this.filterChilds();
	}	

	carrouselData.prototype.filterChilds = function() {
		if(this.maxRow > this.childs) {
			this.maxRow = this.childs;
		}

		for (i = 1; i <= this.maxRow; i++) {
			child = $('.data_section[data-section="' + this.sectionTag + '"] > .cards-section > .card-container:nth-child('+ (i) +')');
			if(this.checkChildFilter(child.children().children(".status"))) {
				child.show(250);
			}
			else {
				child.hide(250);
			}
		}
	}	

	carrouselData.prototype.navigation = function(value) {
		if(value) {
			$('.data_section[data-section="'+ this.sectionTag +'"] div.data-controls').css("display","show");
		}
		else {
			$('.data_section[data-section="'+ this.sectionTag +'"] div.data-controls').css("display","none");
		}
	}


	carrouselData.prototype.loadingUp = function() {
    	var
    	  rows = this.maxRow,
    	  posNro = this.nro,
    	  tag = this.sectionTag;

	    if(this.nro > this.start) {
	        $('.data_section[data-section="' + tag + '"] > .cards-section > .card-container:nth-child('+ (posNro+rows-1) +')').hide(100, function() {
	        	
	  	        $('.data_section[data-section="' + tag + '"] > .cards-section > .card-container:nth-child('+ (posNro-1) +')').show(150)
	        });      
	        if(this.nro > this.start) {
	        	this.nro--;
	      	}        
	    }  
	} 

    carrouselData.prototype.loadingDown = function() {
    	var
    	  rows = this.maxRow,
    	  posNro = this.nro,
    	  tag = this.sectionTag;

	    if((this.nro+this.maxRow) <= this.childs) {
	        $('.data_section[data-section="' + this.sectionTag + '"] > .cards-section > .card-container:nth-child('+ posNro +')' ).hide(100, function() {
	        	
	        	$('.data_section[data-section="' + tag + '"] > .cards-section > .card-container:nth-child('+ (posNro+rows) +')' ).show(150)

	        });   
	        if(this.nro < this.childs) {
	        	this.nro++;
	      	}          
    	} 
  	}	 
  	

var 
	core = new carrouselData("Core",99,1),
	supporting = new carrouselData("Supporting",99,2),
	annotations = new carrouselData("Annotations",99,1);

core.addFilter("data-category-collectingevent");
core.addFilter("data-category-TaxonName");
core.addFilter("data-category-Source");
core.addFilter("data-category-collectionobject");
core.filterChilds();

supporting.addFilter("data-category-collectingevent");
supporting.addFilter("data-category-TaxonName");
supporting.addFilter("data-category-Source");
supporting.addFilter("data-category-collectionobject");
supporting.filterChilds();

annotations.addFilter("data-category-collectingevent");
annotations.addFilter("data-category-TaxonName");
annotations.addFilter("data-category-Source");
annotations.addFilter("data-category-collectionobject");
annotations.filterChilds();



function changeBackgroundColorLink(selector) {
	if ($(selector).parent().hasClass("deactivated")) {
		$(selector).parent().removeClass("deactivated");
	}
	else {
		$(selector).parent().addClass("deactivated");
  	}
}

  //Getting clicks on arrows
  $('.data_section[data-section="Core"]').on('click', 'a.cards-down', function() {
    core.loadingDown();
  });

  $('.data_section[data-section="Core"]').on('click', 'a.cards-up', function() {
    core.loadingUp();
  }); 

  $('.data_section[data-section="Supporting"]').on('click', 'a.cards-down', function() {
    supporting.loadingDown();
  });

  $('.data_section[data-section="Supporting"]').on('click', 'a.cards-up', function() {
    supporting.loadingUp();
  }); 

  $('.data_section[data-section="Annotations"]').on('click', 'a.cards-down', function() {
    annotations.loadingDown();
  });

  $('.data_section[data-section="Annotations"]').on('click', 'a.cards-up', function() {
    annotations.loadingUp();
  });      


  $('.filter').on('click', 'a[data-filter-category="taxon_name"]', function() {
	  	changeBackgroundColorLink('a[data-filter-category="taxon_name"]');
      	core.changeFilter("data-category-TaxonName");
      	supporting.changeFilter("data-category-TaxonName");
      	annotations.changeFilter("data-category-TaxonName"); 
  });

  $('.filter').on('click', 'a[data-filter-category="collecting_event"]', function() {
  		changeBackgroundColorLink('a[data-filter-category="collecting_event"]');
      	core.changeFilter("data-category-collectingevent"); 
      	supporting.changeFilter("data-category-collectingevent"); 
      	annotations.changeFilter("data-category-collectingevent"); 
  });

  $('.filter').on('click', 'a[data-filter-category="collection_object"]', function() {
  		changeBackgroundColorLink('a[data-filter-category="collection_object"]');  	
	    core.changeFilter("data-category-collectionobject");   
	    supporting.changeFilter("data-category-collectionobject");   
	    annotations.changeFilter("data-category-collectionobject"); 
  });  

  $('.filter').on('click', 'a[data-filter-category="source"]', function() {
  		changeBackgroundColorLink('a[data-filter-category="source"]');  	
      	core.changeFilter("data-category-Source");
      	supporting.changeFilter("data-category-Source");
      	annotations.changeFilter("data-category-Source");
  });

   

  //Mousetrap Keys
  
    Mousetrap.bind('s', function() {
      core.changeFilter("data-category-Source");
      supporting.changeFilter("data-category-Source");
      annotations.changeFilter("data-category-Source");
  });

    Mousetrap.bind('e', function() {
      core.changeFilter("data-category-collectingevent"); 
      supporting.changeFilter("data-category-collectingevent"); 
      annotations.changeFilter("data-category-collectingevent");   
  });

    Mousetrap.bind('o', function() {
      core.changeFilter("data-category-collectionobject");   
      supporting.changeFilter("data-category-collectionobject");   
      annotations.changeFilter("data-category-collectionobject");   
    });  

    Mousetrap.bind('t', function() {
      core.changeFilter("data-category-TaxonName");
      supporting.changeFilter("data-category-TaxonName");
      annotations.changeFilter("data-category-TaxonName");     
  });    
   
</script>
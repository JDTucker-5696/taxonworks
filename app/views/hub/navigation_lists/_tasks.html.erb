<%= render "/hub/navigation_lists/hub_category_filter" %>
<div id="task_carrousel">
  <% UserTasks.hub_tasks.each do |task| -%>
    <%= link_to(task_card(task), send(task.path)) -%>
  <% end %>
  <div class="navigation">
    <div class="navigation-arrow">
      <a data-arrow="up" href="#">
        <img src="/assets/icons/arrow-up.svg" width="15"/>
      </a>
    </div>
    <div class="navigation-arrow">
      <a data-arrow="down" href="#">
        <img src="/assets/icons/arrow-down.svg" width="15"/>
      </a>
    </div>
  </div>
</div>
<script type="text/javascript">


//Replace section - fixing html parts
$( '<div class="gray-circle"></div>' ).insertBefore(".unknown");
$( '<div class="yellow-circle"></div>' ).insertBefore(".beta");
$( '<div class="red-circle"></div>' ).insertBefore(".alpha");

$('div.source').replaceWith('<div class="categories source"><img src="/assets/icons/book.svg" width="15"/></div>')
$('div.collecting_event').replaceWith('<div class="categories collecting_event"><div><img src="/assets/icons/geo_location.svg" alt="Collection object" width="10"/></div>')
$('div.collection_object').replaceWith('<div class="categories collection_object"><img src="/assets/icons/picking.svg" width="15"/></div>')


var carrouselTask = function (sec, rows, columns) {

  // sec = Name of data section, this is for identify div.
  // rows = This is for the number of rows that will be displayed, if this number is less than the number of items, it will activate the navigation controls
  
    this.childs = [],
    this.start = 1,
    this.middleBoxSize = 650,
    this.boxSize = 500,
    this.active = [];
    this.arrayPos = 1;
    this.maxRow = 3,
    this.childsCount = 0,
    this.sectionTag = "",
    this.filters = {},
    this.maxRow = rows,
    this.sectionTag = sec;
    this.resetChildsCount();
  }

  carrouselTask.prototype.addFilter = function (nameFilter) {
    this.filters[nameFilter] = false;
  } 

  carrouselTask.prototype.checkChildFilter = function(childTag) {
    var find = 0;
    var isTrue = 0;
    for (var key in this.filters) {
      if(this.filters[key] == true) {
        find++;      
        if (childTag.find('.'+ key).hasClass(key)) {
          isTrue++;
        } 
      }
    }
    if(isTrue == find) {
      return true;
    }
    else {
      return false;
    }
  }

  carrouselTask.prototype.resetChildsCount = function() {
      this.childsCount = $(this.sectionTag + ' > a').length;
  }

  carrouselTask.prototype.changeFilter = function(filterTag)  {
    this.filters[filterTag] = !this.filters[filterTag];
    this.filterChilds();
  } 

  carrouselTask.prototype.showChilds = function() {
    var 
      count = 1;
    
    for (i = 1; i <= this.childs.length; i++) {
      child = $(this.sectionTag + ' > a:nth-child('+ (i) +')');
      if(this.childs[i]) {
        if(count <= this.maxRow) {
          if(count == Math.round(this.maxRow/2)) {
            $(this.sectionTag + " > a:nth-child("+ i +")" ).children(".task_card").css("width",this.middleBoxSize);
          }
          else {
            $(this.sectionTag + " > a:nth-child("+ i +")" ).children(".task_card").css("width",this.boxSize);
          }
          count++;
          child.show(250);
        }
      }
      else {
        child.hide(250);
      }
    }
  }

  carrouselTask.prototype.filterChilds = function() {
    var 
      find = 0,
      activeCount = 0;
      this.arrayPos = 0;
      this.active = [];
      this.childs = [];

    for (i = 1; i <= this.childsCount; i++) {
      child = $(this.sectionTag + ' > a:nth-child('+ (i) +')');
      if(this.checkChildFilter(child)) {
        this.active[activeCount] = i;
        activeCount++;
        this.childs[i] = true;
        find++;
      }
    }
    this.navigation((find > this.maxRow));
  } 

  carrouselTask.prototype.resetView = function() {
    $(this.sectionTag + ' a').css("display","none");
  }

  carrouselTask.prototype.navigation = function(value) {
    if(value) {
      $(this.sectionTag + " > .navigation a").show(250);
    }
    else {
      $(this.sectionTag + " > .navigation a").hide(250);
    }
  }


  carrouselTask.prototype.loadingDown = function() {
    var 
      boxSize = this.boxSize,
      middleBoxSize = this.middleBoxSize,
      sectionTag = this.sectionTag,
      arrayPos = this.arrayPos,
      active = this.active;
      maxRow = this.maxRow;
      if(this.active.length > (this.arrayPos + maxRow)) {
        if((arrayPos+maxRow) <= this.childsCount) {
          $(sectionTag + " > a:nth-child("+ active[arrayPos] +")" ).hide(100, function() {
            $(sectionTag + " a:nth-child("+ active[arrayPos+2] +")" ).children(".task_card").animate({
              width: middleBoxSize
            }, 50);
            $(sectionTag + " a:nth-child("+ active[arrayPos+1] +")" ).children(".task_card").animate({
              width: boxSize
            }, 50); 
            $(sectionTag + " a:nth-child("+ active[arrayPos] +")" ).children(".task_card").animate({
              width: boxSize
            }, 50);       
            $(sectionTag + " > a:nth-child("+ active[arrayPos+3] +")" ).show(150)
          });   
          if(this.arrayPos <= this.active.length) {
            this.arrayPos++;
          }      
        }      
      } 
  }

  carrouselTask.prototype.loadingUp = function() {
    var 
      boxSize = this.boxSize,
      middleBoxSize = this.middleBoxSize,
      sectionTag = this.sectionTag,
      arrayPos = this.arrayPos,
      active = this.active;
      maxRow = this.maxRow;
      if(0 < (this.arrayPos + maxRow)) {
        if((arrayPos) > 0) {
          $(sectionTag + " > a:nth-child("+ active[arrayPos+maxRow-1] +")" ).hide(100, function() {
            $(sectionTag + " a:nth-child("+ active[arrayPos] +")" ).children(".task_card").animate({
              width: middleBoxSize
            }, 50);
            $(sectionTag + " a:nth-child("+ active[arrayPos+maxRow-1] +")" ).children(".task_card").animate({
              width: boxSize
            }, 50); 
            $(sectionTag + " a:nth-child("+ active[arrayPos+1] +")" ).children(".task_card").animate({
              width: boxSize
            }, 50);       
            $(sectionTag + " > a:nth-child("+ active[arrayPos-1] +")" ).show(150)
          });   
          if(this.arrayPos > 0) {
            this.arrayPos--;
          }      
        }      
      } 
  }



  var 
    task = new carrouselTask("#task_carrousel",3,1);
    task.addFilter("source");
    task.addFilter("collecting_event");
    task.addFilter("collection_object");
    task.addFilter("taxon_name");
    task.resetView();
    task.filterChilds();
    task.showChilds();

  function changeBackgroundColorLink(selector) {
    if ($(selector).parent().hasClass("activated")) {
      $(selector).parent().removeClass("activated");
    }
    else {
      $(selector).parent().addClass("activated");
      }
  } 

  $('.filter').on('click', 'a', function() {
      changeBackgroundColorLink('a[data-filter-category="'+ $(this).attr("data-filter-category") +'"]');
      task.changeFilter($(this).attr("data-filter-category"));
      task.resetView();
      task.filterChilds();
      task.showChilds();
  });

  $('.navigation').on('click', 'a', function() {
      if($(this).attr('data-arrow') == "down") {
        task.loadingDown();
      } 
      else {
        task.loadingUp();
      }
  }); 



  //Mousetrap Keys
  Mousetrap.bind('up', function() {
    task.loadingUp();
  });

  Mousetrap.bind('down', function() {
    task.loadingDown();
  });  

  Mousetrap.bind('s', function() {
      changeBackgroundColorLink('a[data-filter-category="source"]');
      task.changeFilter("source");
      task.resetView();
      task.filterChilds();
      task.showChilds(); 
  });

  Mousetrap.bind('e', function() {
      changeBackgroundColorLink('a[data-filter-category="collecting_event"]');
      task.changeFilter("collecting_event");
      task.resetView();
      task.filterChilds();
      task.showChilds();    
  });

  Mousetrap.bind('o', function() {
      changeBackgroundColorLink('a[data-filter-category="collection_object"]');
      task.changeFilter("collection_object");
      task.resetView();
      task.filterChilds();
      task.showChilds();   
  });  

  Mousetrap.bind('t', function() {
      changeBackgroundColorLink('a[data-filter-category="taxon_name"]');
      task.changeFilter("taxon_name");
      task.resetView();
      task.filterChilds();
      task.showChilds();   
  })

var      
  isSafari = isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor),
  last_time = new Date(),
  lastMove = 0,
  actualMove = 0;
  $("body").mousewheel(function(objEvent, intDelta) {   

      var now = new Date(),
      actualMove = objEvent.deltaY;
      
      if((now - last_time) >= 400)
      { 
        if (intDelta <= 0) { 
          if((actualMove < lastMove) || ((actualMove == lastMove) && isSafari)) {
            task.loadingUp();
            last_time = new Date();
            }
          }
          else {
            if((actualMove > lastMove) || ((actualMove == lastMove) && isSafari)) {
              task.loadingDown();
              last_time = new Date();
            }
          }     
      }     
      lastMove = actualMove;
  });
</script>

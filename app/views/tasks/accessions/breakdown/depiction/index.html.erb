<h2> Task: Transcribe depiction </h2>

<div  id="breakdown_sqed_depiction" class="flexbox" >
  <div class="item item1">
    <div id="littlebox">
      <% @result.image_sections.each_with_index do |section, i| -%>
          <%= image_tag(@result.image_path_for_large_image(section), id: "little#{i}", class: "little_image clickable") -%>
      <% end %>
    </div>
  </div>

  <div class="item item2">
    <div id="extracted_images">

      <%= button_tag 'OCR selection', id: "ocr_selection" -%>

      <%= link_to('image', image_path(@result.depiction.image)) -%>

      <div id="bigbox">
        <div id="paper"></div>
      </div>

      <div id="selected_text"></div>

      <div id="selected_picture">
        <canvas id="selected_picture_canvas" height="400" width="400"></canvas>
      </div>

    </div>
  </div>

  <div class="item item3">

    <div id="extracted_header">
      <div class="side_by_side_fields">
        <% @result.image_sections.each do |section| -%>
            <div class="field">
              <%= label_tag section %><%= button_tag 'Append OCR', id: "btn_append_#{section}", class: "append_ocr" -%><br>
              <%= text_area_tag(section, "calculating...", id: "text_for_#{section}") %>
            </div>
        <% end %>
      </div>
    </div>

    <div class="extracted_form">
      <%= form_for(@result.depiction.depiction_object, as: :collection_object, url: depiction_breakdown_update_task_path(@result.depiction)) do |f| -%>
          <div class="field">
            <%= f.label :total %>
            <%= f.text_field :total, size: 2 -%>
          </div>

          <div class="flexbox">

            <div class="item item1">

              <h3> Taxon Determinations </h3>
              <%= f.fields_for(:taxon_determinations, @result.depiction.depiction_object.taxon_determinations) do |o| -%>
                  <div class="field">
                    <%= o.label :name %><br>
                    <%= render(
                                partial: '/workbench/elements/forms/ajax_select',
                                locals: {
                                        controller: '/otus',
                                        object: "collection_object[taxon_determinations_attributes][#{o.index}]",
                                        method: 'otu_id',
                                        tag_id: "otu_id_for_identifier_#{o.index}",
                                        display: otu_tag(o.object.otu),
                                        size: 20})
                    %>
                  </div>
              <% end %>
            </div>


            <div class="item item <%= @result.small_dimensions_for(@result.secondary_sections.second) -%>2">
              <h3> Identifiers </h3>
              <%= f.fields_for(:identifiers, @result.depiction.depiction_object.identifiers) do |i| -%>
                <%= i.hidden_field :type -%>

                <div class="side_by_side_fields">

                  <div class="field">
                    <%= i.label :namespace_id %><br>
                    <%= render(
                      partial: '/workbench/elements/forms/ajax_select',
                      locals: {
                        controller: '/namespaces',
                        object: "collection_object[identifiers_attributes][#{i.index}]",
                        method: 'namespace_id',
                        tag_id: "namespace_id_for_identifier_#{i.index}",
                        display: i.object.namespace ? i.object.namespace.short_name : nil,
                        size: 20,
                        fields_for_object: i})
                      %>

                    <% if @result.depiction.depiction_object.identifiers.size == 1 %>
                      <%= check_box_tag(:lock_namespace, "1", @result.namespace_locked?) -%>lock
                    <% end %>

                  </div>

                  <div class="field">
                    <%= i.label :identifier %><br>
                    <%= i.text_field :identifier %>
                  </div>

                </div>
              </div>
            <% end %>
          </div>

          <div class="side_by_side_fields" id="collection_object_fields">
            <div class="field">
              <%= f.label :buffered_collecting_event %>
              <br>
              <%= f.text_area :buffered_collecting_event -%>
            </div>

            <div class="field">
              <%= f.label :buffered_determinations %>
              <br>
              <%= f.text_area :buffered_determinations -%>
            </div>

            <div class="field">
              <%= f.label :buffered_other_labels %>
              <br>
              <%= f.text_area :buffered_other_labels -%>
            </div>

          </div>

          <%= submit_tag -%>
          <%= submit_tag('Save and next') -%>

          <br class="clear_both">
        <% end %>

    </div>
  </div>

  <%= image_tag(@result.depiction.image.image_file.url(:original), id: 'original_image', hidden: true) -%>
</div>

<script>
    var imageObject;

    imageObject = new Image();

    var imageAspectRatio;
    var canvas;
    var context;
    var paper;
    var paperWidth = 400;
    var paperHeight = 400;

    var select_box;
    var big_svg_image;

    // current position of the select box
    var boxX = 0;
    var boxY = 0;
    var boxW = 50;
    var boxH = 50;

    var sourceX;
    var sourceY;
    var sourceWidth;
    var sourceHeight;

    var svg_box = {
        'type': 'rect',
        'x': 0,
        'y': 0,
        'width': 50,
        'height': 50,
        'fill': '#ffffff',
        'stroke': '#000000',
        'stroke-width': 1,
        'opacity': 0.4
    };

    var p;
    p = Raphael("paper", paperWidth, paperHeight);

    big_svg_image = p.image("<%= @result.image_path_for_large_image(@result.primary_image) -%>", <%= @result.large_dimensions_for(@result.primary_image) -%>);
    addSelectBox(p);
    getBox();

    $('.clickable').on('click', function (click) {
        p.clear();
        big_svg_image = p.image(click.currentTarget.src, 0, 0, click.currentTarget.naturalWidth, click.currentTarget.naturalHeight);
        addSelectBox(p);
        getBox();
        initDecodedText();
    });

    function addSelectBox(paper) {
        var changeCursor = function (e, mouseX, mouseY) {
            // Don't change cursor during a drag operation
            if (this.dragging === true) {
                return;
            }

            // X,Y Coordinates relative to shape's orgin
            var relativeX = mouseX - $('#paper').offset().left - this.attr('x');
            var relativeY = mouseY - $('#paper').offset().top - this.attr('y');

            var shapeWidth = this.attr('width');
            var shapeHeight = this.attr('height');

            var resizeBorder = 10;

            // Change cursor
            if (relativeX < resizeBorder && relativeY < resizeBorder) {
                this.attr('cursor', 'nw-resize');
            } else if (relativeX > shapeWidth - resizeBorder && relativeY < resizeBorder) {
                this.attr('cursor', 'ne-resize');
            } else if (relativeX > shapeWidth - resizeBorder && relativeY > shapeHeight - resizeBorder) {
                this.attr('cursor', 'se-resize');
            } else if (relativeX < resizeBorder && relativeY > shapeHeight - resizeBorder) {
                this.attr('cursor', 'sw-resize');
            } else {
                this.attr('cursor', 'move');
            }
//            getBox();     // relocated to drag end function
        };

        var dragStart = function () {

            // Save some starting values
            this.ox = this.attr('x');
            this.oy = this.attr('y');
            this.ow = this.attr('width');
            this.oh = this.attr('height');
            //            boxX = this.ox;
            //            boxY = this.oy;
            //            boxW = this.ow;
            //            boxH = this.oh;

            this.dragging = true;
        };


        var dragMove = function (dx, dy) {

            // Inspect cursor to determine which resize/move process to use
            switch (this.attr('cursor')) {

                case 'nw-resize' :
                    this.attr({
                        x: this.ox + dx,
                        y: this.oy + dy,
                        width: this.ow - dx,
                        height: this.oh - dy
                    });
                    break;

                case 'ne-resize' :
                    this.attr({                   // not changing x of origin in this case
                        y: this.oy + dy,
                        width: this.ow + dx,
                        height: this.oh - dy
                    });
                    break;

                case 'se-resize' :
                    this.attr({
                        width: this.ow + dx,
                        height: this.oh + dy
                    });
                    break;

                case 'sw-resize' :
                    this.attr({
                        x: this.ox + dx,
                        width: this.ow - dx,
                        height: this.oh + dy
                    });
                    break;

                default :
                    this.attr({
                        x: this.ox + dx,
                        y: this.oy + dy
                    });
                    break;

            }
            boxX = this.attr("x");
            boxY = this.attr("y");
            boxW = this.attr("width");
            boxH = this.attr("height");
        };

        var dragEnd = function () {
            this.dragging = false;
            getBox();               // when box drag or sizing stops, get the box data
        };

        select_box = paper.add([
            svg_box
        ]);

//        select_box.mouseup(selectRectangle());
        select_box.mousemove(changeCursor)
        select_box.drag(dragMove, dragStart, dragEnd);
    }
    ; // end set_select_box

    function big_svg_coords() {
        c = big_svg_image.attr('src').split("scale_to_box")[1].split("/");
        return [Number(c[1]), Number(c[2]), Number(c[3]), Number(c[4])];
    }
    ;

    function getBox() {

        //  alert(boxX + ' | ' + boxY + ' | ' + boxW + ' | ' + boxH);
        canvas = document.getElementById("selected_picture_canvas");
        context = canvas.getContext('2d');

        var coords = big_svg_coords();
        var destWidth;                  // NOTE:  destWidth and destHeight are
        var destHeight;                 // coincidentally the same as paperWidth/Height

        imageAspectRatio = coords[2] / coords[3];

        var ratioW = coords[2] / paperWidth;
        var ratioH = coords[3] / paperHeight;

        sourceX = Math.round((boxX * ratioW) + coords[0]);
        sourceY = Math.round((boxY * ratioH * imageAspectRatio) + coords[1]);
        sourceWidth = Math.round(boxW * ratioW);
        sourceHeight = Math.round(boxH * ratioH * imageAspectRatio);

        if (boxW >= boxH) {         // destination width should equal canvas.width
            destWidth = coords[2] / ratioW;
            destHeight = coords[3] * (boxH / boxW) / ratioH;
            destHeight = coords[3] / ratioW * (boxH / boxW) * imageAspectRatio;
            destHeight = (boxH / boxW) * destWidth;     // dependent width assuming 1:1 pixel ratio
        }
        else {                      // destination height should equal canvas.height
            destHeight = coords[3] / ratioH;
            destWidth = coords[2] * (boxW / boxH) / ratioW;
            destWidth = (boxW / boxH) * destHeight;     // dependent height assuming 1:1 pixel ratio
        }

        var destX = 0;          // was canvas.width / 2 - destWidth / 2;
        var destY = 0;          // was canvas.height / 2 - destHeight / 2;

        imageObject.src = $("#original_image").attr('src');
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.drawImage(imageObject, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);

//        $('#debug_box').html(boxX + "|" + boxY + "|" + boxW + "|" + boxH + "-" + sourceX + "|" + sourceY + "|" + sourceWidth + "|" + sourceHeight );

    }
    ;

    <% @result.image_sections.each do |section| -%>
    $.get("<%= @result.ocr_path_for(section) -%>", function (data) {
                $("#text_for_<%= section -%>").val(data.text);
            }, 'json'
    );
    <% end %>

    function ocr_selection() {
//    var coords = big_svg_coords();

//    var x = Math.round(sourceX + coords[2]);
//    var y = Math.round(sourceY + coords[3]);
//    var w = Math.round(boxW * ratio);
//    var h = Math.round(boxH * ratio);

        var coord_string = Math.round(sourceX) + "/" + Math.round(sourceY) + "/" + Math.round(sourceWidth) + "/" + Math.round(sourceHeight);
        var ocr_string = "/images/<%= @result.depiction.image.id -%>/ocr/" + coord_string;
        $("#selected_text").html(ocr_string);

        $.get(ocr_string, function (data) {
                    if (data.text.length > 0) {
                        $("#selected_text").html(data.text);
                    }
                    else {
                        $("#selected_text").append(' FAILED');
                    }
                }, 'json'
        );


    }
    function initDecodedText() {
        $("#selected_text").html('( decoded text appears here )');
    }

    $('#ocr_selection').on('click', function (click) {
        ocr_selection();
    })
    ;

    $('#setBox').on('click', function () {
        addSelectBox();
    })
    ;

    $(".append_ocr").on('click', function(click) {
        var this_target = this.id.split("btn_append_");
        this_target[0] = "#text_for_" + this_target[1];
        $(this_target[0]).val(( $(this_target[0]).val() + $("#selected_text").html()));
    });
//    $("#btn_append_annotated_specimen").on('click', function(click) {
//        var this_target = this.id.split("btn_append_");
//        $("#text_for_annotated_specimen").append( $("#selected_text").html());
//    });

</script>
<!--<script>  $(document).ready(set_select_box()); </script>-->




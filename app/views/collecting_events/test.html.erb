<%= content_for :head do %>
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script language="javascript">
        var data = [{"type":"Point","coordinates":[-24.56858698453344,35.681762668380514,0.0],"descriptor":{"color":"black","name":"Zerothus nillus"}},{"type":"Point","coordinates":[-74.9068387955929,85.0511287,0.0],"descriptor":{"color":"brown","name":"Firstus, specius"}},{"type":"Point","coordinates":[88.5207330549718,85.0511287,0.0],"descriptor":{"color":"red","name":"Secondus duo"}},{"type":"Point","coordinates":[15.821722268579279,85.0511287,0.0],"descriptor":{"color":"orange","name":"thirdius trio"}},{"type":"Point","coordinates":[54.32960110948457,-85.0511287,0.0],"descriptor":{"color":"yellow","name":"Fourthus quattro"}},{"type":"Point","coordinates":[66.60568196002171,11.265443758493006,0.0],"descriptor":{"color":"green","name":"Fithus ovwhiskius"}},{"type":"Point","coordinates":[-59.36868040834271,-25.878552366955716,0.0],"descriptor":{"color":"blue","name":"Sixtus sextus"}},{"type":"Point","coordinates":[-38.11691609669021,85.0511287,0.0],"descriptor":{"color":"purple","name":"Seventhus septium"}},{"type":"Point","coordinates":[21.901622840648272,-57.6276512919807,0.0],"descriptor":{"color":"gray","name":"Eighthus octo"}},{"type":"Point","coordinates":[-15.005364023589806,-85.0511287,0.0],"descriptor":{"color":"white","name":"Ninethus novim"}}];
      /*[
          {"type":"Point","coordinates":[-24.56858698453344,35.681762668380514,0.0]},
          {"type":"Point","coordinates":[-74.9068387955929,85.0511287,0.0]},
          {"type":"Point","coordinates":[88.5207330549718,85.0511287,0.0]},
          {"type":"Point","coordinates":[15.821722268579279,85.0511287,0.0]},
          {"type":"Point","coordinates":[54.32960110948457,-85.0511287,0.0]},
          {"type":"Point","coordinates":[66.60568196002171,11.265443758493006,0.0]},
          {"type":"Point","coordinates":[-59.36868040834271,-25.878552366955716,0.0]},{"type":"Point","coordinates":[-38.11691609669021,85.0511287,0.0]},
          {"type":"Point","coordinates":[21.901622840648272,-57.6276512919807,0.0]},
          {"type":"Point","coordinates":[-15.005364023589806,-85.0511287,0.0]}
      ];*/
        for (var iii = 0; data.length-1; iii++) {data[iii]["coordinates"][1] *= 0.5;};
     </script>
     <script>
        //var data = [{"type":"Point","coordinates":[-24.56858698453344,35.681762668380514,0.0]},{"type":"Point","coordinates":[-74.9068387955929,85.0511287,0.0]},{"type":"Point","coordinates":[88.5207330549718,85.0511287,0.0]},{"type":"Point","coordinates":[15.821722268579279,85.0511287,0.0]},{"type":"Point","coordinates":[54.32960110948457,-85.0511287,0.0]},{"type":"Point","coordinates":[66.60568196002171,11.265443758493006,0.0]},{"type":"Point","coordinates":[-59.36868040834271,-25.878552366955716,0.0]},{"type":"Point","coordinates":[-38.11691609669021,85.0511287,0.0]},{"type":"Point","coordinates":[21.901622840648272,-57.6276512919807,0.0]},{"type":"Point","coordinates":[-15.005364023589806,-85.0511287,0.0]}];
    var map;	//google map object
    //var LJSpolygon;	//leafletjs map object
    //		var infoWindow;	// unused
    //		var bounds;			// at this point
    var gPoints = [[]];		//googlemaps arrays
    var gLinePoints = [];
    var gPolyPoints = [];

//    var lPolyPoints = [];	//leafletjs arrays
//    var lPoints = [];
//    var lLinePoints = [];
    var xmin = 360.0; var xmax = 0.0; var ymin = 90.0; var ymax = -90.0; var gzoom = 4;//bounds for calculating center point

/*    function leafInit(xlong, ylat) {
        var LJSmap = L.map('Lmap').setView([ylat, xlong], 4);
       L.tileLayer('http://{s}.tile.cloudmade.com/121c86d2baf84dd383f0f5d3eff472fb/997/256/{z}/{x}/{y}.png', {
           attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Copyright <a href="http://cloudmade.com">CloudMade</a>[some bad character]',
            maxZoom: 18
        }).addTo(LJSmap);		//key following cloudmade.com is issued to jrflood@illinois.edu

        if (typeof (data) != 'undefined') {		//make sure data is in
            if (typeof (lPoints) != 'undefined') {
                var lPoint;
                for (var k = 0; k < lPoints.length; k++) {
                    lPoint = createPointL(lPoints[k], "#880000");
                    lPoint.addTo(LJSmap);
                };
            };

            if (typeof (lLinePoints) != 'undefined') {
                for (var k = 0; k < lLinePoints.length; k++) {		//iterate for all simple linestrings collected from linestrings and multilinestrings
//						var lLine = createLineL(lLinePoints[k]);//did not work!!!??!!!???
                    var lLine = new L.Polyline(lLinePoints[k], { color: '#FF0000', weight: 1, opacity: 0.5 }); //,  smoothFactor: 1
                    lLine.addTo(LJSmap);
                };
            };

            for (var kk = 0; kk < lPolyPoints.length; kk++)		//iterate for all simple polygons collected from polygons and multipolygons
            {
                LJSpolygon = null;
                LJSpolygon = createPolygonL(lPolyPoints[kk], {color: '#00FF00', fillColor: '#FF0000', weight: 1, opacity: 1.0 }).addTo(LJSmap);  //, fillColor: '#f03', fillOpacity: 0.5 }).addTo(LJSmap);
            };
        };
    }   //leafInit
*/
    function initialize(xlong, ylat) {
        //    bounds = new google.maps.LatLngBounds();

        getdata(); //xmax = xmax - 180.0;  xmin = xmin - 180.0;
        if (xlong == undefined) {xlong =  0.5*(xmax + xmin) -180.0;};
        if (ylat == undefined) {ylat = 0.5*(ymax + ymin);};
        if (xmax > 359.0 && xmin < 1) {gzoom = 2;}
        //   if (data == null) alert();
        //xlong =  0.5*(xmax + xmin);
        //ylat = 0.5*(ymax + ymin);
        var myLatLng = new google.maps.LatLng(ylat, xlong);

        //var myLatLng = new google.maps.LatLng(ylat,xlong);  //was document.form1.Slat.value, document.form1.Slon.value, now removed
        //var myLatLng = new google.maps.LatLng(40.0911, -88.2382);  //shampoo banana
        var myOptions = {
            zoom: gzoom,
            center: myLatLng,
            mapTypeControl: true,
            mapTypeControlOptions: { style: google.maps.MapTypeControlStyle.DROPDOWN_MENU },
            navigationControl: true,
            mapTypeId: google.maps.MapTypeId.TERRAIN
        };
        map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        if (typeof (gPoints) != 'undefined') {
            var gPoint;
            for (var k = 1; k < gPoints.length; k++) {
                gPoint = createPoint(gPoints[k], "#880000");
                gPoint.setMap(map);
            };
        };

        if (typeof (gLinePoints) != 'undefined') {
            for (var k = 0; k < gLinePoints.length; k++) {
//					var gLine = createLine(gLinePoints[k], "black");	//did not work!!!??!!!???
                var gLine = new  google.maps.Polyline({
                    path: gLinePoints[k],
                    geodesic: false,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.5,
                    strokeWeight: 1
                });
                gLine.setMap(map);
            };
        };

        if (typeof (gPolyPoints) != 'undefined') {
            var gPoly;
            for (var k = 0; k < gPolyPoints.length; k++) {
                gPoly = createPolygon(gPolyPoints[k], "#880000");
                gPoly.setMap(map);
            };
        };

        //    map.fitBounds(bounds);
    };	//google initialize

    function getdata() {
        /*		get data object encoded as geoJSON and disseminate to google and leaflet arrays
         Assumptions:
         data is a hash
         Multi- geometry types are composed of simple (homogeneous) types: Point, LineString, Polygon
         these are collected as xPoints[], xLinePoints[], xPolyPoints[]; x = g | l for google and leafletjs respectively
         this leaves ambiguous the association of attributes to the objects (e.g., color, etc.)
         New realization: there may or may not be GeometryCollections, which may contain any type, including GeometryCollection !  $#!+
         */
//		if (typeof (data) != 'undefined') {
//            var dataArray = [];
//            //if (typeof(data) != typeof(dataArray))
//                {dataArray[0] = data; data = []; data[0] = dataArray[0];};
//            for (var ii = 0; ii < data.length; ii++) {
//                if (typeof(data[ii].type) != "undefined") {
//                    if (data[ii].type == "GeometryCollection") {
//					for (var i = 0; i < data[ii].geometries.length; i++) {
//						getTypeData(data[ii].geometries[i]);
//					};  //for i
//				}
//				else
//				{
//					getTypeData(data[ii]);
//				}   //data.type
//                }   // for ii
//            };     //data != undefined
//		};     //data != undefined
        if (typeof (data) != 'undefined') {
            var dataArray = [];
            if (data instanceof Array)
            {}  //if already an array, then do nothing
            else    //convert it to an array
            {dataArray[0] = data; data = []; data[0] = dataArray[0];};
            for (var ii = 0; ii < data.length; ii++) {
                if (typeof (data[ii].type) != "undefined") {
                    if (data[ii].type == "GeometryCollection") {
                        for (var i = 0; i < data[ii].geometries.length; i++) {
                            getTypeData(data[ii].geometries[i]);
                        };  //for i
                    } //data[ii].type == "Geom...ion"
                    else
                    {
                        getTypeData(data[ii]);
                    }   //data.type
                };     //data[ii] != undefined
            }   // for ii
        };     //data != undefined
    };

    function getTypeData(thisType) {		//detect and extract geometry types from higher level enumerator, recursible

        if (thisType.type == "GeometryCollection") {
            for (var i = 0; i < thisType.geometries.length; i++) {
                if (typeof (thisType.geometries[i].type) != "undefined") {
                    getTypeData(thisType.geometries[i]);		//  recurse if GeometryCollection
                };     //thisType != undefined
            };  //for i
        };

        if (thisType.type == "Point") {
            xgtlt(thisType.coordinates[0]); ygtlt(thisType.coordinates[1]); //box check
            gPoints.push([new google.maps.LatLng(thisType.coordinates[1], thisType.coordinates[0]), thisType.descriptor]);
            //lPoints.push([thisType.coordinates[1], thisType.coordinates[0]]);   // x:=0; y:=1; (z:=2;)
        };

        if (thisType.type == "MultiPoint") {
            for (var l = 0; l < thisType.coordinates.length; l++) {
                //xgtlt(thisType.coordinates[l][0]); ygtlt(thisType.coordinates[l][1]); //box check
                gPoints.push(new google.maps.LatLng(thisType.coordinates[l][1], thisType.coordinates[l][0]));
                //lPoints.push([thisType.coordinates[l][1], thisType.coordinates[l][0]]);
            };
        };

        if (thisType.type == "LineString") {
            var m = gLinePoints.length;
            var n = lLinePoints.length;
            gLinePoints[m] = [];
            lLinePoints[n] = [];
            for (var l = 0; l < thisType.coordinates.length; l++) {
                //xgtlt(thisType.coordinates[l][0]); ygtlt(thisType.coordinates[l][1]); //box check
                gLinePoints[m].push(new google.maps.LatLng(thisType.coordinates[l][1], thisType.coordinates[l][0]));
                //lLinePoints[n].push(new L.latLng(thisType.coordinates[l][1], thisType.coordinates[l][0]));
                //};
            };
        };

        if (thisType.type == "MultiLineString") {
            for (var k = 0; k < thisType.coordinates.length; k++) {   //k enumerates linestrings, l enums points
                var m = gLinePoints.length;
                var n = lLinePoints.length;
                gLinePoints[m] = [];
                //lLinePoints[n] = [];
                for (var l = 0; l < thisType.coordinates[k].length; l++) {
                    //xgtlt(thisType.coordinates[k][l][0]); ygtlt(thisType.coordinates[k][l][1]); //box check
                    gLinePoints[m].push(new google.maps.LatLng(thisType.coordinates[k][l][1], thisType.coordinates[k][l][0]));
                    //lLinePoints[n].push(new L.latLng(thisType.coordinates[k][l][1], thisType.coordinates[k][l][0]));
                };
            };
        };

        if (thisType.type == "Polygon") {
            for (var k = 0; k < thisType.coordinates.length; k++) {
                // k enumerates polygons, l enumerates points
                var m = gPolyPoints.length;
                var n = lPolyPoints.length;
                gPolyPoints[m] = [];		//create a new coordinate/point array for this (m/n) polygon
                //lPolyPoints[n] = [];
                for (var l = 0; l < thisType.coordinates[k].length; l++) {
                    //xgtlt(thisType.coordinates[k][l][0]); ygtlt(thisType.coordinates[k][l][1]); //box check
                    gPolyPoints[m].push(new google.maps.LatLng(thisType.coordinates[k][l][1], thisType.coordinates[k][l][0]));
                    //lPolyPoints[n].push(new L.latLng(thisType.coordinates[k][l][1], thisType.coordinates[k][l][0]));
                };
            };
        };

        if (thisType.type == "MultiPolygon") {
            for (var j = 0; j < thisType.coordinates.length; j++) {		// j iterates over multipolygons   *-

                for (var k = 0; k < thisType.coordinates[j].length; k++) {  //k iterates over polygons
                    var m = gPolyPoints.length;
                    var n = lPolyPoints.length;
                    gPolyPoints[m] = []; //create a new coordinate/point array for this (m/n) polygon
                    //lPolyPoints[n] = [];
                    for (var l = 0; l < thisType.coordinates[j][k].length; l++) {
                        xgtlt(thisType.coordinates[j][k][l][0]);
                        ygtlt(thisType.coordinates[j][k][l][1]); //box check
                        gPolyPoints[m].push(new google.maps.LatLng(thisType.coordinates[j][k][l][1], thisType.coordinates[j][k][l][0]));
                        //lPolyPoints[n].push(new L.latLng(thisType.coordinates[j][k][l][1], thisType.coordinates[j][k][l][0]));
                    };
                };
            };
        };
    };        //getTypeData


    function createPoint(coords, color) {
        var mColor = 'red';    //default
        if (typeof (coords[1]) != 'undefined')
        var marker = new google.maps.Marker({
            position: coords[0],
            map: map,
            icon: getMarkerImage(coords[1].color)
            });
            var infoWindow = new google.maps.InfoWindow({
                content: '<div style="width: 100px">' + coords[1].name + '<br />' + collectionDateList[colorIndex] + '<br />' + collectorList[colorIndex] + '<br />Lat: ' + coords[0].lat().toPrecision(6) +
                        '<br />Lng: ' + coords[0].lng().toPrecision(6) + '</div>'
            });
        colorIndex++; if (colorIndex > 9) colorIndex = 0;
        google.maps.event.addListener(marker, 'click', function () {
            //map.panTo(coordinate);
            infoWindow.open(map, marker);
        });
    return marker;  //marker includes infoWindow containing JSON-encoded name and lat/long

   //color param being overtaken by events; coords[1] now contains descriptor object
    };

    //		function createLine(coords, color) {
    //			return new google.maps.Polyline({
    //				paths: coords,
    //				geodesic: false,
    //				strokeColor: "#FF0000",
    //				strokeOpacity: 0.5,
    //				strokeWeight: 3
    //			});
    //		};

    function createPolygon(coords, color) {
        return new google.maps.Polygon({
            paths: coords,
            strokeColor: "black",
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillColor: color,
            fillOpacity: 0.3
        });
    };

    function xgtlt(xtest) {
        if (xtest + 180.0 > xmax) {xmax = xtest + 180.0;};
        if (xtest + 180.0 < xmin) {xmin = xtest + 180.0;};
    };

    function ygtlt(ytest) {
        if (ytest > ymax) {ymax = ytest;};
        if (ytest < ymin) {ymin = ytest;};
    };

        /*
    function createPointL(coords, color) {
        return new L.marker(coords, { color: color });
        var marker = L.marker([51.5, -0.09]).addTo(map);
    };
*/
    //		function createLineL(coords, color) {
    //			return new L.Polyline(coords, { color: color });
    //		};

    function createPolygonL(coords, color) {
        return new L.Polygon(coords, { color: color });
    };
        var icons = new Array();		//populate the marker images
        icons["red"] = new google.maps.MarkerImage("/Users/jrflood/src/taxonworks/app/assets/javascripts/mapIcons/mm_20_red.png",
// This marker is 20 pixels wide by 34 pixels tall.
                new google.maps.Size(20, 34),
// The origin for this image is 0,0.
                new google.maps.Point(0,0),
// The anchor for this image is at 9,34.
                new google.maps.Point(9, 34));
        var iconShape = {
            coord: [9, 0, 6, 1, 4, 2, 2, 4, 0, 8, 0, 12, 1, 14, 2, 16, 5, 19, 7, 23, 8, 26, 9, 30, 9, 34, 11, 34, 11, 30, 12, 26, 13, 24, 14, 21, 16, 18, 18, 16, 20, 12, 20, 8, 18, 4, 16, 2, 15, 1, 13, 0],
            type: 'poly'
        };
        //var colorList = ['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'purple', 'gray', 'white'];
        var collectorList = ["Rich Flood", "Matt Yoder", "David Eades", "Ed Dewalt", "Sam Heads", "Jarod Michael Thomas", "Andrew Miller", "R. Loy Phillippe", "Mike Murphy", "unknown"];
        var collectionDateList = ["01-May-2012", "May 2, 2013", "April 3 2011", "04MAR2004", "Jan 5, 2009", "Feb 6 2000", "December 7, 1941", "08OCT08", "Nov. 11, 1918", "12/12/2012", "13/13/13"];
        var colorIndex = 0;
        // initial thoughts on hash-based datum to accompany markers
        /*
         color, identifier/title, coordinate comes as JSON (can a hash be inserted in-line with point?)
         general enumerator for name-value pairs?
         var descriptor = {Title: "Specimen: Genus Specius", Collector: "Furstus Lastius", Date: "08 May 2014"};
         content: '<div style="width: 100px">' + descriptor.Title + '<br />' + descriptor.date  + '<br />' + descriptor.Collector + '<br />Lat: ' + coordinate.lat().toPrecision(6) +

         */

        // placeMarker modified to panTo position, addListener to <this>marker which also pans and opens infowindow with 6 digit lat/longs,  use custom icon

        function placeMarker(coordinate, map) {
            var marker = new google.maps.Marker({
                position: coordinate,
                map: map,
                shape: iconShape,
                icon: "mapIcons/mm_20_" + colorList[colorIndex] + ".png"
            });

            //map.panTo(coordinate); // coordinate is a google latLng
            var infoWindow = new google.maps.InfoWindow({
                content: '<div style="width: 100px">' + speciesList[colorIndex] + '<br />' + collectionDateList[colorIndex] + '<br />' + collectorList[colorIndex] + '<br />Lat: ' + coordinate.lat().toPrecision(6) +
                        '<br />Lng: ' + coordinate.lng().toPrecision(6) + '</div>'
            });
            colorIndex++; if (colorIndex > 9) colorIndex = 0;
            google.maps.event.addListener(marker, 'click', function () {
                //map.panTo(coordinate);
                infoWindow.open(map, marker);
            });
        }
        function getMarkerImage(iconColor) {
            if ((typeof(iconColor)=="undefined") || (iconColor==null)) {iconColor = "red";}
            if (!icons[iconColor]) {
                icons[iconColor] = new google.maps.MarkerImage("/Users/jrflood/src/taxonworks/app/assets/javascripts/mapIcons/mm_20_"+ iconColor +".png",
// This marker is 20 pixels wide by 34 pixels tall.
                        new google.maps.Size(20, 34),
// The origin for this image is 0,0.
                        new google.maps.Point(0,0),
// The anchor for this image is at 6,20.
                        new google.maps.Point(9, 34));
            }
            return icons[iconColor];
        }		//end of getMarkerImage

     </script>


<% end %>
<%= content_tag(:p, @geo.to_json)%>
<!--div class='left_floater' -->
  <form id="form1">
    <div id="map_canvas" style="width:1024px; height: 768px;"></div>
    <script language="JavaScript">
        initialize();
    </script> </form>
<!--/div-->
